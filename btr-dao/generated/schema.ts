// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class DAOProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DAOProposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DAOProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DAOProposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DAOProposal | null {
    return changetype<DAOProposal | null>(
      store.get_in_block("DAOProposal", id),
    );
  }

  static load(id: string): DAOProposal | null {
    return changetype<DAOProposal | null>(store.get("DAOProposal", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): Bytes {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set title(value: Bytes) {
    this.set("title", Value.fromBytes(value));
  }

  get proposal(): Bytes {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set proposal(value: Bytes) {
    this.set("proposal", Value.fromBytes(value));
  }

  get proposalOwner(): Bytes {
    let value = this.get("proposalOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set proposalOwner(value: Bytes) {
    this.set("proposalOwner", Value.fromBytes(value));
  }

  get proposalAccepted(): boolean {
    let value = this.get("proposalAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set proposalAccepted(value: boolean) {
    this.set("proposalAccepted", Value.fromBoolean(value));
  }

  get proposalExecuted(): boolean {
    let value = this.get("proposalExecuted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set proposalExecuted(value: boolean) {
    this.set("proposalExecuted", Value.fromBoolean(value));
  }

  get votedYes(): BigInt | null {
    let value = this.get("votedYes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set votedYes(value: BigInt | null) {
    if (!value) {
      this.unset("votedYes");
    } else {
      this.set("votedYes", Value.fromBigInt(<BigInt>value));
    }
  }

  get votedNo(): BigInt | null {
    let value = this.get("votedNo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set votedNo(value: BigInt | null) {
    if (!value) {
      this.unset("votedNo");
    } else {
      this.set("votedNo", Value.fromBigInt(<BigInt>value));
    }
  }

  get proposalValidationTime(): BigInt | null {
    let value = this.get("proposalValidationTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalValidationTime(value: BigInt | null) {
    if (!value) {
      this.unset("proposalValidationTime");
    } else {
      this.set("proposalValidationTime", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DAOMember extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DAOMember entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DAOMember must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DAOMember", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DAOMember | null {
    return changetype<DAOMember | null>(
      store.get_in_block("DAOMember", id.toHexString()),
    );
  }

  static load(id: Bytes): DAOMember | null {
    return changetype<DAOMember | null>(
      store.get("DAOMember", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get daoProposals(): DAOProposalLoader {
    return new DAOProposalLoader(
      "DAOMember",
      this.get("id")!.toBytes().toHexString(),
      "daoProposals",
    );
  }
}

export class ProposalAcceptedToVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ProposalAcceptedToVote entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProposalAcceptedToVote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProposalAcceptedToVote", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProposalAcceptedToVote | null {
    return changetype<ProposalAcceptedToVote | null>(
      store.get_in_block("ProposalAcceptedToVote", id),
    );
  }

  static load(id: string): ProposalAcceptedToVote | null {
    return changetype<ProposalAcceptedToVote | null>(
      store.get("ProposalAcceptedToVote", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }
}

export class ProposalRejectedForNoVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ProposalRejectedForNoVote entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProposalRejectedForNoVote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProposalRejectedForNoVote", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProposalRejectedForNoVote | null {
    return changetype<ProposalRejectedForNoVote | null>(
      store.get_in_block("ProposalRejectedForNoVote", id),
    );
  }

  static load(id: string): ProposalRejectedForNoVote | null {
    return changetype<ProposalRejectedForNoVote | null>(
      store.get("ProposalRejectedForNoVote", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }
}

export class ProposalExecuted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProposalExecuted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProposalExecuted must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProposalExecuted", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProposalExecuted | null {
    return changetype<ProposalExecuted | null>(
      store.get_in_block("ProposalExecuted", id),
    );
  }

  static load(id: string): ProposalExecuted | null {
    return changetype<ProposalExecuted | null>(
      store.get("ProposalExecuted", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }
}

export class DAOProposalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DAOProposal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DAOProposal[]>(value);
  }
}
